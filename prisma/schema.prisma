generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_STRING_FOR_PRISMA")
}

model User {
  id        Int        @id @default(autoincrement())
  email     String     @unique
  password  String
  firstName String
  lastName  String
  dob       DateTime   @default(now())
  role      Role       @default(POLICY_HOLDER)
  address   String
  phone     Int
  policies  Policy[]
  claims    Claim[]
  documents Document[]
  reports   Report[]
}

model Policy {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  hospName  String
  hospCity  String
  desc      String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  claims    Claim[]
}

model Claim {
  id               Int        @id @default(autoincrement())
  createdAt        DateTime   @default(now())
  desc             String
  claimType        String
  dateOfIntimation DateTime
  claimAmount      Int
  policy           Policy     @relation(fields: [policyId], references: [id], onDelete: Cascade)
  policyId         Int        @unique
  documents        Document[]
  report           Report?
  user             User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           Int
}

model Document {
  id           Int     @id @default(autoincrement())
  docType      DocType
  name         String
  originalName String
  claim        Claim   @relation(fields: [claimId], references: [id], onDelete: Cascade)
  claimId      Int
  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int
}

model Report {
  id                  Int                  @id @default(autoincrement())
  combinedSummary     String
  estimatedExpenses   Int
  notes               String?
  approved            Boolean?
  claim               Claim                @relation(fields: [claimId], references: [id], onDelete: Cascade)
  claimId             Int                  @unique
  user                User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId              Int
  docWiseReport       DocWiseReport?
  alternateTreatments AlternateTreatments?
}

model DocWiseReport {
  id       Int    @id @default(autoincrement())
  text     Json
  report   Report @relation(fields: [reportId], references: [id], onDelete: Cascade)
  reportId Int    @unique
}

model AlternateTreatments {
  id       Int    @id @default(autoincrement())
  text     Json
  report   Report @relation(fields: [reportId], references: [id], onDelete: Cascade)
  reportId Int    @unique
}

model Otp {
  id       Int      @id @default(autoincrement())
  email    String
  code     String
  expireAt DateTime
}

enum Role {
  POLICY_HOLDER
  CLAIM_ASSESSOR
}

enum DocType {
  SCAN
  TEXT
}
